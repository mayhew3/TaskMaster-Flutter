// Mocks generated by Mockito 5.3.2 from annotations
// in taskmaster/test/notification_scheduler_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:ui' as _i10;

import 'package:flutter/material.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:taskmaster/app_state.dart' as _i2;
import 'package:taskmaster/auth.dart' as _i4;
import 'package:taskmaster/models/sprint.dart' as _i7;
import 'package:taskmaster/models/task_date_type.dart' as _i12;
import 'package:taskmaster/models/task_item.dart' as _i6;
import 'package:taskmaster/nav_helper.dart' as _i5;
import 'package:taskmaster/task_helper.dart' as _i8;
import 'package:taskmaster/task_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppState_0 extends _i1.SmartFake implements _i2.AppState {
  _FakeAppState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskRepository_1 extends _i1.SmartFake
    implements _i3.TaskRepository {
  _FakeTaskRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskMasterAuth_2 extends _i1.SmartFake
    implements _i4.TaskMasterAuth {
  _FakeTaskMasterAuth_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNavHelper_3 extends _i1.SmartFake implements _i5.NavHelper {
  _FakeNavHelper_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskItem_4 extends _i1.SmartFake implements _i6.TaskItem {
  _FakeTaskItem_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSprint_5 extends _i1.SmartFake implements _i7.Sprint {
  _FakeSprint_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskHelper extends _i1.Mock implements _i8.TaskHelper {
  @override
  _i2.AppState get appState => (super.noSuchMethod(
        Invocation.getter(#appState),
        returnValue: _FakeAppState_0(
          this,
          Invocation.getter(#appState),
        ),
        returnValueForMissingStub: _FakeAppState_0(
          this,
          Invocation.getter(#appState),
        ),
      ) as _i2.AppState);
  @override
  _i3.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_1(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTaskRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.TaskRepository);
  @override
  _i4.TaskMasterAuth get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeTaskMasterAuth_2(
          this,
          Invocation.getter(#auth),
        ),
        returnValueForMissingStub: _FakeTaskMasterAuth_2(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i4.TaskMasterAuth);
  @override
  _i9.StateSetter get stateSetter => (super.noSuchMethod(
        Invocation.getter(#stateSetter),
        returnValue: (_i10.VoidCallback fn) {},
        returnValueForMissingStub: (_i10.VoidCallback fn) {},
      ) as _i9.StateSetter);
  @override
  _i5.NavHelper get navHelper => (super.noSuchMethod(
        Invocation.getter(#navHelper),
        returnValue: _FakeNavHelper_3(
          this,
          Invocation.getter(#navHelper),
        ),
        returnValueForMissingStub: _FakeNavHelper_3(
          this,
          Invocation.getter(#navHelper),
        ),
      ) as _i5.NavHelper);
  @override
  set navHelper(_i5.NavHelper? _navHelper) => super.noSuchMethod(
        Invocation.setter(
          #navHelper,
          _navHelper,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i11.Future<void> reloadTasks() => (super.noSuchMethod(
        Invocation.method(
          #reloadTasks,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
  @override
  _i11.Future<_i6.TaskItem> addTask(_i6.TaskItem? taskItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [taskItem],
        ),
        returnValue: _i11.Future<_i6.TaskItem>.value(_FakeTaskItem_4(
          this,
          Invocation.method(
            #addTask,
            [taskItem],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i6.TaskItem>.value(_FakeTaskItem_4(
          this,
          Invocation.method(
            #addTask,
            [taskItem],
          ),
        )),
      ) as _i11.Future<_i6.TaskItem>);
  @override
  _i6.TaskItem? maybeCreateNextIteration(
    _i6.TaskItem? taskItem,
    bool? completed,
    DateTime? completionDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #maybeCreateNextIteration,
          [
            taskItem,
            completed,
            completionDate,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i6.TaskItem?);
  @override
  _i6.TaskItem createNextIteration(
    _i6.TaskItem? taskItem,
    DateTime? completionDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNextIteration,
          [
            taskItem,
            completionDate,
          ],
        ),
        returnValue: _FakeTaskItem_4(
          this,
          Invocation.method(
            #createNextIteration,
            [
              taskItem,
              completionDate,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeTaskItem_4(
          this,
          Invocation.method(
            #createNextIteration,
            [
              taskItem,
              completionDate,
            ],
          ),
        ),
      ) as _i6.TaskItem);
  @override
  _i11.Future<_i6.TaskItem> completeTask(
    _i6.TaskItem? taskItem,
    bool? completed,
    _i9.StateSetter? stateSetter,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #completeTask,
          [
            taskItem,
            completed,
            stateSetter,
          ],
        ),
        returnValue: _i11.Future<_i6.TaskItem>.value(_FakeTaskItem_4(
          this,
          Invocation.method(
            #completeTask,
            [
              taskItem,
              completed,
              stateSetter,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i6.TaskItem>.value(_FakeTaskItem_4(
          this,
          Invocation.method(
            #completeTask,
            [
              taskItem,
              completed,
              stateSetter,
            ],
          ),
        )),
      ) as _i11.Future<_i6.TaskItem>);
  @override
  _i11.Future<void> deleteTask(
    _i6.TaskItem? taskItem,
    _i9.StateSetter? stateSetter,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [
            taskItem,
            stateSetter,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
  @override
  _i11.Future<_i6.TaskItem> updateTask(_i6.TaskItem? taskItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [taskItem],
        ),
        returnValue: _i11.Future<_i6.TaskItem>.value(_FakeTaskItem_4(
          this,
          Invocation.method(
            #updateTask,
            [taskItem],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i6.TaskItem>.value(_FakeTaskItem_4(
          this,
          Invocation.method(
            #updateTask,
            [taskItem],
          ),
        )),
      ) as _i11.Future<_i6.TaskItem>);
  @override
  void previewSnooze(
    _i6.TaskItem? taskItem,
    int? numUnits,
    String? unitSize,
    _i12.TaskDateType? dateType,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #previewSnooze,
          [
            taskItem,
            numUnits,
            unitSize,
            dateType,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i11.Future<_i6.TaskItem> snoozeTask(
    _i6.TaskItem? taskItem,
    int? numUnits,
    String? unitSize,
    _i12.TaskDateType? dateType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #snoozeTask,
          [
            taskItem,
            numUnits,
            unitSize,
            dateType,
          ],
        ),
        returnValue: _i11.Future<_i6.TaskItem>.value(_FakeTaskItem_4(
          this,
          Invocation.method(
            #snoozeTask,
            [
              taskItem,
              numUnits,
              unitSize,
              dateType,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i11.Future<_i6.TaskItem>.value(_FakeTaskItem_4(
          this,
          Invocation.method(
            #snoozeTask,
            [
              taskItem,
              numUnits,
              unitSize,
              dateType,
            ],
          ),
        )),
      ) as _i11.Future<_i6.TaskItem>);
  @override
  _i11.Future<_i7.Sprint> addSprintAndTasks(
    _i7.Sprint? sprint,
    List<_i6.TaskItem>? taskItems,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSprintAndTasks,
          [
            sprint,
            taskItems,
          ],
        ),
        returnValue: _i11.Future<_i7.Sprint>.value(_FakeSprint_5(
          this,
          Invocation.method(
            #addSprintAndTasks,
            [
              sprint,
              taskItems,
            ],
          ),
        )),
        returnValueForMissingStub: _i11.Future<_i7.Sprint>.value(_FakeSprint_5(
          this,
          Invocation.method(
            #addSprintAndTasks,
            [
              sprint,
              taskItems,
            ],
          ),
        )),
      ) as _i11.Future<_i7.Sprint>);
  @override
  _i11.Future<_i7.Sprint> addTasksToSprint(
    _i7.Sprint? sprint,
    List<_i6.TaskItem>? taskItems,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTasksToSprint,
          [
            sprint,
            taskItems,
          ],
        ),
        returnValue: _i11.Future<_i7.Sprint>.value(_FakeSprint_5(
          this,
          Invocation.method(
            #addTasksToSprint,
            [
              sprint,
              taskItems,
            ],
          ),
        )),
        returnValueForMissingStub: _i11.Future<_i7.Sprint>.value(_FakeSprint_5(
          this,
          Invocation.method(
            #addTasksToSprint,
            [
              sprint,
              taskItems,
            ],
          ),
        )),
      ) as _i11.Future<_i7.Sprint>);
}
