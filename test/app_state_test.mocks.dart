// Mocks generated by Mockito 5.4.4 from annotations
// in taskmaster/test/app_state_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;

import 'package:built_collection/built_collection.dart' as _i5;
import 'package:firebase_auth/firebase_auth.dart' as _i20;
import 'package:flutter/foundation.dart' as _i10;
import 'package:flutter/src/widgets/framework.dart' as _i9;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i21;
import 'package:taskmaster/models/data_payload.dart' as _i3;
import 'package:taskmaster/models/snooze.dart' as _i8;
import 'package:taskmaster/models/snooze_blueprint.dart' as _i18;
import 'package:taskmaster/models/sprint.dart' as _i6;
import 'package:taskmaster/models/sprint_assignment.dart' as _i15;
import 'package:taskmaster/models/sprint_blueprint.dart' as _i16;
import 'package:taskmaster/models/task_item.dart' as _i4;
import 'package:taskmaster/models/task_item_blueprint.dart' as _i13;
import 'package:taskmaster/models/task_item_recur_preview.dart' as _i14;
import 'package:taskmaster/models/task_recurrence.dart' as _i7;
import 'package:taskmaster/models/task_recurrence_blueprint.dart' as _i17;
import 'package:taskmaster/task_repository.dart' as _i11;
import 'package:taskmaster/typedefs.dart' as _i19;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataPayload_1 extends _i1.SmartFake implements _i3.DataPayload {
  _FakeDataPayload_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskItem_2 extends _i1.SmartFake implements _i4.TaskItem {
  _FakeTaskItem_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBuiltList_3<E> extends _i1.SmartFake implements _i5.BuiltList<E> {
  _FakeBuiltList_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSprint_4 extends _i1.SmartFake implements _i6.Sprint {
  _FakeSprint_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskRecurrence_5 extends _i1.SmartFake
    implements _i7.TaskRecurrence {
  _FakeTaskRecurrence_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnooze_6 extends _i1.SmartFake implements _i8.Snooze {
  _FakeSnooze_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_7 extends _i1.SmartFake implements Uri {
  _FakeUri_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeElement_8 extends _i1.SmartFake implements _i9.Element {
  _FakeElement_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_9 extends _i1.SmartFake
    implements _i10.DiagnosticsNode {
  _FakeDiagnosticsNode_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i10.TextTreeConfiguration? parentConfiguration,
    _i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i11.TaskRepository {
  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);

  @override
  set client(_i2.Client? _client) => super.noSuchMethod(
        Invocation.setter(
          #client,
          _client,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<int?> getPersonId(
    String? email,
    String? idToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPersonId,
          [
            email,
            idToken,
          ],
        ),
        returnValue: _i12.Future<int?>.value(),
        returnValueForMissingStub: _i12.Future<int?>.value(),
      ) as _i12.Future<int?>);

  @override
  _i12.Future<_i3.DataPayload> loadTasks(
    int? personId,
    String? idToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadTasks,
          [
            personId,
            idToken,
          ],
        ),
        returnValue: _i12.Future<_i3.DataPayload>.value(_FakeDataPayload_1(
          this,
          Invocation.method(
            #loadTasks,
            [
              personId,
              idToken,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i3.DataPayload>.value(_FakeDataPayload_1(
          this,
          Invocation.method(
            #loadTasks,
            [
              personId,
              idToken,
            ],
          ),
        )),
      ) as _i12.Future<_i3.DataPayload>);

  @override
  _i12.Future<
      ({_i7.TaskRecurrence? recurrence, _i4.TaskItem taskItem})> addTask(
    _i13.TaskItemBlueprint? blueprint,
    String? idToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [
            blueprint,
            idToken,
          ],
        ),
        returnValue: _i12.Future<
            ({_i7.TaskRecurrence? recurrence, _i4.TaskItem taskItem})>.value((
          recurrence: null,
          taskItem: _FakeTaskItem_2(
            this,
            Invocation.method(
              #addTask,
              [
                blueprint,
                idToken,
              ],
            ),
          )
        )),
        returnValueForMissingStub: _i12.Future<
            ({_i7.TaskRecurrence? recurrence, _i4.TaskItem taskItem})>.value((
          recurrence: null,
          taskItem: _FakeTaskItem_2(
            this,
            Invocation.method(
              #addTask,
              [
                blueprint,
                idToken,
              ],
            ),
          )
        )),
      ) as _i12
          .Future<({_i7.TaskRecurrence? recurrence, _i4.TaskItem taskItem})>);

  @override
  _i12.Future<
      ({_i7.TaskRecurrence? recurrence, _i4.TaskItem taskItem})> addRecurTask(
    _i14.TaskItemRecurPreview? blueprint,
    String? idToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addRecurTask,
          [
            blueprint,
            idToken,
          ],
        ),
        returnValue: _i12.Future<
            ({_i7.TaskRecurrence? recurrence, _i4.TaskItem taskItem})>.value((
          recurrence: null,
          taskItem: _FakeTaskItem_2(
            this,
            Invocation.method(
              #addRecurTask,
              [
                blueprint,
                idToken,
              ],
            ),
          )
        )),
        returnValueForMissingStub: _i12.Future<
            ({_i7.TaskRecurrence? recurrence, _i4.TaskItem taskItem})>.value((
          recurrence: null,
          taskItem: _FakeTaskItem_2(
            this,
            Invocation.method(
              #addRecurTask,
              [
                blueprint,
                idToken,
              ],
            ),
          )
        )),
      ) as _i12
          .Future<({_i7.TaskRecurrence? recurrence, _i4.TaskItem taskItem})>);

  @override
  _i12.Future<
      ({_i7.TaskRecurrence? recurrence, _i4.TaskItem taskItem})> updateTask(
    int? taskItemId,
    _i13.TaskItemBlueprint? taskItemBlueprint,
    String? idToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [
            taskItemId,
            taskItemBlueprint,
            idToken,
          ],
        ),
        returnValue: _i12.Future<
            ({_i7.TaskRecurrence? recurrence, _i4.TaskItem taskItem})>.value((
          recurrence: null,
          taskItem: _FakeTaskItem_2(
            this,
            Invocation.method(
              #updateTask,
              [
                taskItemId,
                taskItemBlueprint,
                idToken,
              ],
            ),
          )
        )),
        returnValueForMissingStub: _i12.Future<
            ({_i7.TaskRecurrence? recurrence, _i4.TaskItem taskItem})>.value((
          recurrence: null,
          taskItem: _FakeTaskItem_2(
            this,
            Invocation.method(
              #updateTask,
              [
                taskItemId,
                taskItemBlueprint,
                idToken,
              ],
            ),
          )
        )),
      ) as _i12
          .Future<({_i7.TaskRecurrence? recurrence, _i4.TaskItem taskItem})>);

  @override
  _i12.Future<
      ({
        _i5.BuiltList<_i4.TaskItem> addedTasks,
        _i6.Sprint sprint,
        _i5.BuiltList<_i15.SprintAssignment> sprintAssignments
      })> addSprintWithTaskItems(
    _i16.SprintBlueprint? blueprint,
    _i5.BuiltList<_i4.TaskItem>? existingItems,
    _i5.BuiltList<_i14.TaskItemRecurPreview>? newItems,
    String? idToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSprintWithTaskItems,
          [
            blueprint,
            existingItems,
            newItems,
            idToken,
          ],
        ),
        returnValue: _i12.Future<
            ({
              _i5.BuiltList<_i4.TaskItem> addedTasks,
              _i6.Sprint sprint,
              _i5.BuiltList<_i15.SprintAssignment> sprintAssignments
            })>.value((
          addedTasks: _FakeBuiltList_3<_i4.TaskItem>(
            this,
            Invocation.method(
              #addSprintWithTaskItems,
              [
                blueprint,
                existingItems,
                newItems,
                idToken,
              ],
            ),
          ),
          sprint: _FakeSprint_4(
            this,
            Invocation.method(
              #addSprintWithTaskItems,
              [
                blueprint,
                existingItems,
                newItems,
                idToken,
              ],
            ),
          ),
          sprintAssignments: _FakeBuiltList_3<_i15.SprintAssignment>(
            this,
            Invocation.method(
              #addSprintWithTaskItems,
              [
                blueprint,
                existingItems,
                newItems,
                idToken,
              ],
            ),
          )
        )),
        returnValueForMissingStub: _i12.Future<
            ({
              _i5.BuiltList<_i4.TaskItem> addedTasks,
              _i6.Sprint sprint,
              _i5.BuiltList<_i15.SprintAssignment> sprintAssignments
            })>.value((
          addedTasks: _FakeBuiltList_3<_i4.TaskItem>(
            this,
            Invocation.method(
              #addSprintWithTaskItems,
              [
                blueprint,
                existingItems,
                newItems,
                idToken,
              ],
            ),
          ),
          sprint: _FakeSprint_4(
            this,
            Invocation.method(
              #addSprintWithTaskItems,
              [
                blueprint,
                existingItems,
                newItems,
                idToken,
              ],
            ),
          ),
          sprintAssignments: _FakeBuiltList_3<_i15.SprintAssignment>(
            this,
            Invocation.method(
              #addSprintWithTaskItems,
              [
                blueprint,
                existingItems,
                newItems,
                idToken,
              ],
            ),
          )
        )),
      ) as _i12.Future<
          ({
            _i5.BuiltList<_i4.TaskItem> addedTasks,
            _i6.Sprint sprint,
            _i5.BuiltList<_i15.SprintAssignment> sprintAssignments
          })>);

  @override
  _i12.Future<_i7.TaskRecurrence> addTaskRecurrence(
    _i17.TaskRecurrenceBlueprint? blueprint,
    String? idToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTaskRecurrence,
          [
            blueprint,
            idToken,
          ],
        ),
        returnValue:
            _i12.Future<_i7.TaskRecurrence>.value(_FakeTaskRecurrence_5(
          this,
          Invocation.method(
            #addTaskRecurrence,
            [
              blueprint,
              idToken,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i7.TaskRecurrence>.value(_FakeTaskRecurrence_5(
          this,
          Invocation.method(
            #addTaskRecurrence,
            [
              blueprint,
              idToken,
            ],
          ),
        )),
      ) as _i12.Future<_i7.TaskRecurrence>);

  @override
  _i12.Future<_i7.TaskRecurrence> updateTaskRecurrence(
    int? taskRecurrenceId,
    _i17.TaskRecurrenceBlueprint? blueprint,
    String? idToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTaskRecurrence,
          [
            taskRecurrenceId,
            blueprint,
            idToken,
          ],
        ),
        returnValue:
            _i12.Future<_i7.TaskRecurrence>.value(_FakeTaskRecurrence_5(
          this,
          Invocation.method(
            #updateTaskRecurrence,
            [
              taskRecurrenceId,
              blueprint,
              idToken,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i7.TaskRecurrence>.value(_FakeTaskRecurrence_5(
          this,
          Invocation.method(
            #updateTaskRecurrence,
            [
              taskRecurrenceId,
              blueprint,
              idToken,
            ],
          ),
        )),
      ) as _i12.Future<_i7.TaskRecurrence>);

  @override
  _i12.Future<
      ({
        _i5.BuiltList<_i4.TaskItem> addedTasks,
        _i5.BuiltList<_i15.SprintAssignment> sprintAssignments
      })> addTasksToSprint(
    _i5.BuiltList<_i4.TaskItem>? taskItems,
    _i5.BuiltList<_i14.TaskItemRecurPreview>? taskItemRecurPreviews,
    _i6.Sprint? sprint,
    String? idToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTasksToSprint,
          [
            taskItems,
            taskItemRecurPreviews,
            sprint,
            idToken,
          ],
        ),
        returnValue: _i12.Future<
            ({
              _i5.BuiltList<_i4.TaskItem> addedTasks,
              _i5.BuiltList<_i15.SprintAssignment> sprintAssignments
            })>.value((
          addedTasks: _FakeBuiltList_3<_i4.TaskItem>(
            this,
            Invocation.method(
              #addTasksToSprint,
              [
                taskItems,
                taskItemRecurPreviews,
                sprint,
                idToken,
              ],
            ),
          ),
          sprintAssignments: _FakeBuiltList_3<_i15.SprintAssignment>(
            this,
            Invocation.method(
              #addTasksToSprint,
              [
                taskItems,
                taskItemRecurPreviews,
                sprint,
                idToken,
              ],
            ),
          )
        )),
        returnValueForMissingStub: _i12.Future<
            ({
              _i5.BuiltList<_i4.TaskItem> addedTasks,
              _i5.BuiltList<_i15.SprintAssignment> sprintAssignments
            })>.value((
          addedTasks: _FakeBuiltList_3<_i4.TaskItem>(
            this,
            Invocation.method(
              #addTasksToSprint,
              [
                taskItems,
                taskItemRecurPreviews,
                sprint,
                idToken,
              ],
            ),
          ),
          sprintAssignments: _FakeBuiltList_3<_i15.SprintAssignment>(
            this,
            Invocation.method(
              #addTasksToSprint,
              [
                taskItems,
                taskItemRecurPreviews,
                sprint,
                idToken,
              ],
            ),
          )
        )),
      ) as _i12.Future<
          ({
            _i5.BuiltList<_i4.TaskItem> addedTasks,
            _i5.BuiltList<_i15.SprintAssignment> sprintAssignments
          })>);

  @override
  _i12.Future<void> deleteTask(
    _i4.TaskItem? taskItem,
    String? idToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [
            taskItem,
            idToken,
          ],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<_i8.Snooze> addSnooze(
    _i18.SnoozeBlueprint? snooze,
    String? idToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSnooze,
          [
            snooze,
            idToken,
          ],
        ),
        returnValue: _i12.Future<_i8.Snooze>.value(_FakeSnooze_6(
          this,
          Invocation.method(
            #addSnooze,
            [
              snooze,
              idToken,
            ],
          ),
        )),
        returnValueForMissingStub: _i12.Future<_i8.Snooze>.value(_FakeSnooze_6(
          this,
          Invocation.method(
            #addSnooze,
            [
              snooze,
              idToken,
            ],
          ),
        )),
      ) as _i12.Future<_i8.Snooze>);

  @override
  Uri getUriWithParameters(
    String? path,
    Map<String, dynamic>? queryParameters,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUriWithParameters,
          [
            path,
            queryParameters,
          ],
        ),
        returnValue: _FakeUri_7(
          this,
          Invocation.method(
            #getUriWithParameters,
            [
              path,
              queryParameters,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeUri_7(
          this,
          Invocation.method(
            #getUriWithParameters,
            [
              path,
              queryParameters,
            ],
          ),
        ),
      ) as Uri);

  @override
  Uri getUri(String? path) => (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [path],
        ),
        returnValue: _FakeUri_7(
          this,
          Invocation.method(
            #getUri,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeUri_7(
          this,
          Invocation.method(
            #getUri,
            [path],
          ),
        ),
      ) as Uri);

  @override
  _i12.Future<dynamic> executeGetApiAction({
    required String? uriString,
    Map<String, Object>? queryParameters,
    required String? idToken,
    required String? operationDescription,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeGetApiAction,
          [],
          {
            #uriString: uriString,
            #queryParameters: queryParameters,
            #idToken: idToken,
            #operationDescription: operationDescription,
          },
        ),
        returnValue: _i12.Future<dynamic>.value(),
        returnValueForMissingStub: _i12.Future<dynamic>.value(),
      ) as _i12.Future<dynamic>);

  @override
  _i12.Future<dynamic> executeBodyApiAction({
    required _i19.BodyApiOperation? bodyApiOperation,
    required Map<String, Object?>? payload,
    required String? uriString,
    Map<String, Object>? queryParameters,
    required String? idToken,
    required String? operationDescription,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeBodyApiAction,
          [],
          {
            #bodyApiOperation: bodyApiOperation,
            #payload: payload,
            #uriString: uriString,
            #queryParameters: queryParameters,
            #idToken: idToken,
            #operationDescription: operationDescription,
          },
        ),
        returnValue: _i12.Future<dynamic>.value(),
        returnValueForMissingStub: _i12.Future<dynamic>.value(),
      ) as _i12.Future<dynamic>);

  @override
  _i12.Future<void> executeDeleteApiAction({
    required String? uriString,
    Map<String, Object>? queryParameters,
    required String? idToken,
    required String? operationDescription,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeDeleteApiAction,
          [],
          {
            #uriString: uriString,
            #queryParameters: queryParameters,
            #idToken: idToken,
            #operationDescription: operationDescription,
          },
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i20.UserCredential {}

/// A class which mocks [Widget].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockWidget extends _i1.Mock implements _i9.Widget {
  @override
  _i9.Element createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeElement_8(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeElement_8(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i9.Element);

  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: _i21.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
        returnValueForMissingStub: _i21.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
      ) as String);

  @override
  void debugFillProperties(_i10.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String toStringShallow({
    String? joiner = r', ',
    _i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i21.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
        returnValueForMissingStub: _i21.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i21.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
            },
          ),
        ),
        returnValueForMissingStub: _i21.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  _i10.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i10.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_9(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_9(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i10.DiagnosticsNode);

  @override
  List<_i10.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i10.DiagnosticsNode>[],
        returnValueForMissingStub: <_i10.DiagnosticsNode>[],
      ) as List<_i10.DiagnosticsNode>);

  @override
  String toString(
          {_i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info}) =>
      super.toString();
}
