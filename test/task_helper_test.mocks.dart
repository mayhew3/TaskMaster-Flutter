// Mocks generated by Mockito 5.0.16 from annotations
// in taskmaster/test/task_helper_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i14;

import 'package:flutter/material.dart' as _i5;
import 'package:google_sign_in/google_sign_in.dart' as _i13;
import 'package:http/http.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:taskmaster/app_state.dart' as _i2;
import 'package:taskmaster/auth.dart' as _i6;
import 'package:taskmaster/models/snooze.dart' as _i11;
import 'package:taskmaster/models/sprint.dart' as _i12;
import 'package:taskmaster/models/task_item.dart' as _i9;
import 'package:taskmaster/nav_helper.dart' as _i8;
import 'package:taskmaster/notification_scheduler.dart' as _i7;
import 'package:taskmaster/task_helper.dart' as _i4;
import 'package:taskmaster/task_repository.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAppState_0 extends _i1.Fake implements _i2.AppState {}

class _FakeTaskRepository_1 extends _i1.Fake implements _i3.TaskRepository {}

class _FakeTaskHelper_2 extends _i1.Fake implements _i4.TaskHelper {}

class _FakeBuildContext_3 extends _i1.Fake implements _i5.BuildContext {}

class _FakeTaskMasterAuth_4 extends _i1.Fake implements _i6.TaskMasterAuth {}

class _FakeNotificationScheduler_5 extends _i1.Fake
    implements _i7.NotificationScheduler {}

class _FakeNavHelper_6 extends _i1.Fake implements _i8.NavHelper {}

class _FakeTaskItem_7 extends _i1.Fake implements _i9.TaskItem {}

class _FakeClient_8 extends _i1.Fake implements _i10.Client {}

class _FakeUri_9 extends _i1.Fake implements Uri {}

class _FakeSnooze_10 extends _i1.Fake implements _i11.Snooze {}

class _FakeSprint_11 extends _i1.Fake implements _i12.Sprint {}

/// A class which mocks [NavHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavHelper extends _i1.Mock implements _i8.NavHelper {
  MockNavHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppState get appState => (super.noSuchMethod(Invocation.getter(#appState),
      returnValue: _FakeAppState_0()) as _i2.AppState);
  @override
  _i3.TaskRepository get taskRepository =>
      (super.noSuchMethod(Invocation.getter(#taskRepository),
          returnValue: _FakeTaskRepository_1()) as _i3.TaskRepository);
  @override
  _i4.TaskHelper get taskHelper =>
      (super.noSuchMethod(Invocation.getter(#taskHelper),
          returnValue: _FakeTaskHelper_2()) as _i4.TaskHelper);
  @override
  _i5.BuildContext get context =>
      (super.noSuchMethod(Invocation.getter(#context),
          returnValue: _FakeBuildContext_3()) as _i5.BuildContext);
  @override
  set context(_i5.BuildContext? _context) =>
      super.noSuchMethod(Invocation.setter(#context, _context),
          returnValueForMissingStub: null);
  @override
  void updateContext(_i5.BuildContext? context) =>
      super.noSuchMethod(Invocation.method(#updateContext, [context]),
          returnValueForMissingStub: null);
  @override
  void goToLoadingScreen(String? msg) =>
      super.noSuchMethod(Invocation.method(#goToLoadingScreen, [msg]),
          returnValueForMissingStub: null);
  @override
  void goToSignInScreen() =>
      super.noSuchMethod(Invocation.method(#goToSignInScreen, []),
          returnValueForMissingStub: null);
  @override
  void goToHomeScreen() =>
      super.noSuchMethod(Invocation.method(#goToHomeScreen, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AppState].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppState extends _i1.Mock implements _i2.AppState {
  MockAppState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);
  @override
  set isLoading(bool? _isLoading) =>
      super.noSuchMethod(Invocation.setter(#isLoading, _isLoading),
          returnValueForMissingStub: null);
  @override
  List<_i9.TaskItem> get taskItems =>
      (super.noSuchMethod(Invocation.getter(#taskItems),
          returnValue: <_i9.TaskItem>[]) as List<_i9.TaskItem>);
  @override
  set taskItems(List<_i9.TaskItem>? _taskItems) =>
      super.noSuchMethod(Invocation.setter(#taskItems, _taskItems),
          returnValueForMissingStub: null);
  @override
  List<_i12.Sprint> get sprints =>
      (super.noSuchMethod(Invocation.getter(#sprints),
          returnValue: <_i12.Sprint>[]) as List<_i12.Sprint>);
  @override
  set sprints(List<_i12.Sprint>? _sprints) =>
      super.noSuchMethod(Invocation.setter(#sprints, _sprints),
          returnValueForMissingStub: null);
  @override
  _i6.TaskMasterAuth get auth => (super.noSuchMethod(Invocation.getter(#auth),
      returnValue: _FakeTaskMasterAuth_4()) as _i6.TaskMasterAuth);
  @override
  set currentUser(_i13.GoogleSignInAccount? _currentUser) =>
      super.noSuchMethod(Invocation.setter(#currentUser, _currentUser),
          returnValueForMissingStub: null);
  @override
  bool get tokenRetrieved => (super
          .noSuchMethod(Invocation.getter(#tokenRetrieved), returnValue: false)
      as bool);
  @override
  set tokenRetrieved(bool? _tokenRetrieved) =>
      super.noSuchMethod(Invocation.setter(#tokenRetrieved, _tokenRetrieved),
          returnValueForMissingStub: null);
  @override
  int get personId =>
      (super.noSuchMethod(Invocation.getter(#personId), returnValue: 0) as int);
  @override
  set personId(int? _personId) =>
      super.noSuchMethod(Invocation.setter(#personId, _personId),
          returnValueForMissingStub: null);
  @override
  _i7.NotificationScheduler get notificationScheduler =>
      (super.noSuchMethod(Invocation.getter(#notificationScheduler),
              returnValue: _FakeNotificationScheduler_5())
          as _i7.NotificationScheduler);
  @override
  set notificationScheduler(
          _i7.NotificationScheduler? _notificationScheduler) =>
      super.noSuchMethod(
          Invocation.setter(#notificationScheduler, _notificationScheduler),
          returnValueForMissingStub: null);
  @override
  String get title =>
      (super.noSuchMethod(Invocation.getter(#title), returnValue: '')
          as String);
  @override
  set title(String? _title) =>
      super.noSuchMethod(Invocation.setter(#title, _title),
          returnValueForMissingStub: null);
  @override
  _i8.NavHelper get navHelper =>
      (super.noSuchMethod(Invocation.getter(#navHelper),
          returnValue: _FakeNavHelper_6()) as _i8.NavHelper);
  @override
  set navHelper(_i8.NavHelper? _navHelper) =>
      super.noSuchMethod(Invocation.setter(#navHelper, _navHelper),
          returnValueForMissingStub: null);
  @override
  void updateNavHelper(_i8.NavHelper? navHelper) =>
      super.noSuchMethod(Invocation.method(#updateNavHelper, [navHelper]),
          returnValueForMissingStub: null);
  @override
  _i14.Future<String> getIdToken() =>
      (super.noSuchMethod(Invocation.method(#getIdToken, []),
          returnValue: Future<String>.value('')) as _i14.Future<String>);
  @override
  List<_i9.TaskItem> getAllTasks() =>
      (super.noSuchMethod(Invocation.method(#getAllTasks, []),
          returnValue: <_i9.TaskItem>[]) as List<_i9.TaskItem>);
  @override
  List<_i9.TaskItem> getTasksForActiveSprint() =>
      (super.noSuchMethod(Invocation.method(#getTasksForActiveSprint, []),
          returnValue: <_i9.TaskItem>[]) as List<_i9.TaskItem>);
  @override
  _i9.TaskItem? findTaskItemWithId(int? taskId) =>
      (super.noSuchMethod(Invocation.method(#findTaskItemWithId, [taskId]))
          as _i9.TaskItem?);
  @override
  _i12.Sprint? findSprintWithId(int? sprintId) =>
      (super.noSuchMethod(Invocation.method(#findSprintWithId, [sprintId]))
          as _i12.Sprint?);
  @override
  void updateNotificationScheduler(
          _i5.BuildContext? context, _i4.TaskHelper? taskHelper) =>
      super.noSuchMethod(
          Invocation.method(
              #updateNotificationScheduler, [context, taskHelper]),
          returnValueForMissingStub: null);
  @override
  _i14.Future<void> syncAllNotifications() => (super.noSuchMethod(
      Invocation.method(#syncAllNotifications, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i14.Future<void>);
  @override
  void finishedLoading() =>
      super.noSuchMethod(Invocation.method(#finishedLoading, []),
          returnValueForMissingStub: null);
  @override
  _i9.TaskItem addNewTaskToList(_i9.TaskItem? taskItem) =>
      (super.noSuchMethod(Invocation.method(#addNewTaskToList, [taskItem]),
          returnValue: _FakeTaskItem_7()) as _i9.TaskItem);
  @override
  void deleteTaskFromList(_i9.TaskItem? taskItem) =>
      super.noSuchMethod(Invocation.method(#deleteTaskFromList, [taskItem]),
          returnValueForMissingStub: null);
  @override
  bool isAuthenticated() =>
      (super.noSuchMethod(Invocation.method(#isAuthenticated, []),
          returnValue: false) as bool);
  @override
  void signOut() => super.noSuchMethod(Invocation.method(#signOut, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppState get appState => (super.noSuchMethod(Invocation.getter(#appState),
      returnValue: _FakeAppState_0()) as _i2.AppState);
  @override
  set appState(_i2.AppState? _appState) =>
      super.noSuchMethod(Invocation.setter(#appState, _appState),
          returnValueForMissingStub: null);
  @override
  _i10.Client get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeClient_8()) as _i10.Client);
  @override
  set client(_i10.Client? _client) =>
      super.noSuchMethod(Invocation.setter(#client, _client),
          returnValueForMissingStub: null);
  @override
  String getBaseUrl() =>
      (super.noSuchMethod(Invocation.method(#getBaseUrl, []), returnValue: '')
          as String);
  @override
  Uri getUri(String? path) =>
      (super.noSuchMethod(Invocation.method(#getUri, [path]),
          returnValue: _FakeUri_9()) as Uri);
  @override
  Uri getUriWithParameters(
          String? path, Map<String, dynamic>? queryParameters) =>
      (super.noSuchMethod(
          Invocation.method(#getUriWithParameters, [path, queryParameters]),
          returnValue: _FakeUri_9()) as Uri);
  @override
  _i14.Future<void> loadTasks(_i5.StateSetter? stateSetter) =>
      (super.noSuchMethod(Invocation.method(#loadTasks, [stateSetter]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i14.Future<void>);
  @override
  _i14.Future<_i9.TaskItem> addTask(_i9.TaskItem? taskItem) =>
      (super.noSuchMethod(Invocation.method(#addTask, [taskItem]),
              returnValue: Future<_i9.TaskItem>.value(_FakeTaskItem_7()))
          as _i14.Future<_i9.TaskItem>);
  @override
  _i14.Future<_i11.Snooze> addSnooze(_i11.Snooze? snooze) =>
      (super.noSuchMethod(Invocation.method(#addSnooze, [snooze]),
              returnValue: Future<_i11.Snooze>.value(_FakeSnooze_10()))
          as _i14.Future<_i11.Snooze>);
  @override
  _i14.Future<_i12.Sprint> addSprint(_i12.Sprint? sprint) =>
      (super.noSuchMethod(Invocation.method(#addSprint, [sprint]),
              returnValue: Future<_i12.Sprint>.value(_FakeSprint_11()))
          as _i14.Future<_i12.Sprint>);
  @override
  _i14.Future<void> addTasksToSprint(
          List<_i9.TaskItem>? taskItems, _i12.Sprint? sprint) =>
      (super.noSuchMethod(
              Invocation.method(#addTasksToSprint, [taskItems, sprint]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i14.Future<void>);
  @override
  _i14.Future<_i9.TaskItem> completeTask(_i9.TaskItem? taskItem) =>
      (super.noSuchMethod(Invocation.method(#completeTask, [taskItem]),
              returnValue: Future<_i9.TaskItem>.value(_FakeTaskItem_7()))
          as _i14.Future<_i9.TaskItem>);
  @override
  _i14.Future<_i9.TaskItem> updateTask(_i9.TaskItem? taskItem) =>
      (super.noSuchMethod(Invocation.method(#updateTask, [taskItem]),
              returnValue: Future<_i9.TaskItem>.value(_FakeTaskItem_7()))
          as _i14.Future<_i9.TaskItem>);
  @override
  _i14.Future<void> deleteTask(_i9.TaskItem? taskItem) => (super.noSuchMethod(
      Invocation.method(#deleteTask, [taskItem]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i14.Future<void>);
  @override
  String toString() => super.toString();
}
