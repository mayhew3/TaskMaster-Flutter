// Mocks generated by Mockito 5.0.16 from annotations
// in taskmaster/test/task_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;
import 'dart:convert' as _i11;
import 'dart:typed_data' as _i12;

import 'package:flutter/material.dart' as _i16;
import 'package:google_sign_in/google_sign_in.dart' as _i8;
import 'package:http/src/base_request.dart' as _i13;
import 'package:http/src/client.dart' as _i9;
import 'package:http/src/response.dart' as _i2;
import 'package:http/src/streamed_response.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:taskmaster/app_state.dart' as _i14;
import 'package:taskmaster/auth.dart' as _i4;
import 'package:taskmaster/models/sprint.dart' as _i15;
import 'package:taskmaster/models/task_item.dart' as _i7;
import 'package:taskmaster/nav_helper.dart' as _i6;
import 'package:taskmaster/notification_scheduler.dart' as _i5;
import 'package:taskmaster/task_helper.dart' as _i17;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponse_0 extends _i1.Fake implements _i2.Response {}

class _FakeStreamedResponse_1 extends _i1.Fake implements _i3.StreamedResponse {
}

class _FakeTaskMasterAuth_2 extends _i1.Fake implements _i4.TaskMasterAuth {}

class _FakeNotificationScheduler_3 extends _i1.Fake
    implements _i5.NotificationScheduler {}

class _FakeNavHelper_4 extends _i1.Fake implements _i6.NavHelper {}

class _FakeTaskItem_5 extends _i1.Fake implements _i7.TaskItem {}

class _FakeGoogleSignInAuthentication_6 extends _i1.Fake
    implements _i8.GoogleSignInAuthentication {}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i9.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i10.Future<_i2.Response>);
  @override
  _i10.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i10.Future<_i2.Response>);
  @override
  _i10.Future<_i2.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i11.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i10.Future<_i2.Response>);
  @override
  _i10.Future<_i2.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i11.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i10.Future<_i2.Response>);
  @override
  _i10.Future<_i2.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i11.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i10.Future<_i2.Response>);
  @override
  _i10.Future<_i2.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i11.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i10.Future<_i2.Response>);
  @override
  _i10.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i10.Future<String>);
  @override
  _i10.Future<_i12.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i12.Uint8List>.value(_i12.Uint8List(0)))
          as _i10.Future<_i12.Uint8List>);
  @override
  _i10.Future<_i3.StreamedResponse> send(_i13.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_1()))
          as _i10.Future<_i3.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AppState].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppState extends _i1.Mock implements _i14.AppState {
  MockAppState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);
  @override
  set isLoading(bool? _isLoading) =>
      super.noSuchMethod(Invocation.setter(#isLoading, _isLoading),
          returnValueForMissingStub: null);
  @override
  List<_i7.TaskItem> get taskItems =>
      (super.noSuchMethod(Invocation.getter(#taskItems),
          returnValue: <_i7.TaskItem>[]) as List<_i7.TaskItem>);
  @override
  set taskItems(List<_i7.TaskItem>? _taskItems) =>
      super.noSuchMethod(Invocation.setter(#taskItems, _taskItems),
          returnValueForMissingStub: null);
  @override
  List<_i15.Sprint> get sprints =>
      (super.noSuchMethod(Invocation.getter(#sprints),
          returnValue: <_i15.Sprint>[]) as List<_i15.Sprint>);
  @override
  set sprints(List<_i15.Sprint>? _sprints) =>
      super.noSuchMethod(Invocation.setter(#sprints, _sprints),
          returnValueForMissingStub: null);
  @override
  _i4.TaskMasterAuth get auth => (super.noSuchMethod(Invocation.getter(#auth),
      returnValue: _FakeTaskMasterAuth_2()) as _i4.TaskMasterAuth);
  @override
  set currentUser(_i8.GoogleSignInAccount? _currentUser) =>
      super.noSuchMethod(Invocation.setter(#currentUser, _currentUser),
          returnValueForMissingStub: null);
  @override
  bool get tokenRetrieved => (super
          .noSuchMethod(Invocation.getter(#tokenRetrieved), returnValue: false)
      as bool);
  @override
  set tokenRetrieved(bool? _tokenRetrieved) =>
      super.noSuchMethod(Invocation.setter(#tokenRetrieved, _tokenRetrieved),
          returnValueForMissingStub: null);
  @override
  int get personId =>
      (super.noSuchMethod(Invocation.getter(#personId), returnValue: 0) as int);
  @override
  set personId(int? _personId) =>
      super.noSuchMethod(Invocation.setter(#personId, _personId),
          returnValueForMissingStub: null);
  @override
  _i5.NotificationScheduler get notificationScheduler =>
      (super.noSuchMethod(Invocation.getter(#notificationScheduler),
              returnValue: _FakeNotificationScheduler_3())
          as _i5.NotificationScheduler);
  @override
  set notificationScheduler(
          _i5.NotificationScheduler? _notificationScheduler) =>
      super.noSuchMethod(
          Invocation.setter(#notificationScheduler, _notificationScheduler),
          returnValueForMissingStub: null);
  @override
  String get title =>
      (super.noSuchMethod(Invocation.getter(#title), returnValue: '')
          as String);
  @override
  set title(String? _title) =>
      super.noSuchMethod(Invocation.setter(#title, _title),
          returnValueForMissingStub: null);
  @override
  _i6.NavHelper get navHelper =>
      (super.noSuchMethod(Invocation.getter(#navHelper),
          returnValue: _FakeNavHelper_4()) as _i6.NavHelper);
  @override
  set navHelper(_i6.NavHelper? _navHelper) =>
      super.noSuchMethod(Invocation.setter(#navHelper, _navHelper),
          returnValueForMissingStub: null);
  @override
  void updateNavHelper(_i6.NavHelper? navHelper) =>
      super.noSuchMethod(Invocation.method(#updateNavHelper, [navHelper]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<String> getIdToken() =>
      (super.noSuchMethod(Invocation.method(#getIdToken, []),
          returnValue: Future<String>.value('')) as _i10.Future<String>);
  @override
  List<_i7.TaskItem> getAllTasks() =>
      (super.noSuchMethod(Invocation.method(#getAllTasks, []),
          returnValue: <_i7.TaskItem>[]) as List<_i7.TaskItem>);
  @override
  List<_i7.TaskItem> getTasksForActiveSprint() =>
      (super.noSuchMethod(Invocation.method(#getTasksForActiveSprint, []),
          returnValue: <_i7.TaskItem>[]) as List<_i7.TaskItem>);
  @override
  _i7.TaskItem? findTaskItemWithId(int? taskId) =>
      (super.noSuchMethod(Invocation.method(#findTaskItemWithId, [taskId]))
          as _i7.TaskItem?);
  @override
  _i15.Sprint? findSprintWithId(int? sprintId) =>
      (super.noSuchMethod(Invocation.method(#findSprintWithId, [sprintId]))
          as _i15.Sprint?);
  @override
  void updateNotificationScheduler(
          _i16.BuildContext? context, _i17.TaskHelper? taskHelper) =>
      super.noSuchMethod(
          Invocation.method(
              #updateNotificationScheduler, [context, taskHelper]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<void> syncAllNotifications() => (super.noSuchMethod(
      Invocation.method(#syncAllNotifications, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  void finishedLoading() =>
      super.noSuchMethod(Invocation.method(#finishedLoading, []),
          returnValueForMissingStub: null);
  @override
  _i7.TaskItem addNewTaskToList(_i7.TaskItem? taskItem) =>
      (super.noSuchMethod(Invocation.method(#addNewTaskToList, [taskItem]),
          returnValue: _FakeTaskItem_5()) as _i7.TaskItem);
  @override
  void deleteTaskFromList(_i7.TaskItem? taskItem) =>
      super.noSuchMethod(Invocation.method(#deleteTaskFromList, [taskItem]),
          returnValueForMissingStub: null);
  @override
  bool isAuthenticated() =>
      (super.noSuchMethod(Invocation.method(#isAuthenticated, []),
          returnValue: false) as bool);
  @override
  void signOut() => super.noSuchMethod(Invocation.method(#signOut, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GoogleSignInAccount].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignInAccount extends _i1.Mock
    implements _i8.GoogleSignInAccount {
  MockGoogleSignInAccount() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get email =>
      (super.noSuchMethod(Invocation.getter(#email), returnValue: '')
          as String);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i10.Future<_i8.GoogleSignInAuthentication> get authentication =>
      (super.noSuchMethod(Invocation.getter(#authentication),
              returnValue: Future<_i8.GoogleSignInAuthentication>.value(
                  _FakeGoogleSignInAuthentication_6()))
          as _i10.Future<_i8.GoogleSignInAuthentication>);
  @override
  _i10.Future<Map<String, String>> get authHeaders => (super.noSuchMethod(
          Invocation.getter(#authHeaders),
          returnValue: Future<Map<String, String>>.value(<String, String>{}))
      as _i10.Future<Map<String, String>>);
  @override
  _i10.Future<void> clearAuthCache() => (super.noSuchMethod(
      Invocation.method(#clearAuthCache, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  String toString() => super.toString();
}
